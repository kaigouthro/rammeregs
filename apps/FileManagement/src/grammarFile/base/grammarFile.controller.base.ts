/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrammarFileService } from "../grammarFile.service";
import { GrammarFileCreateInput } from "./GrammarFileCreateInput";
import { GrammarFile } from "./GrammarFile";
import { GrammarFileFindManyArgs } from "./GrammarFileFindManyArgs";
import { GrammarFileWhereUniqueInput } from "./GrammarFileWhereUniqueInput";
import { GrammarFileUpdateInput } from "./GrammarFileUpdateInput";

export class GrammarFileControllerBase {
  constructor(protected readonly service: GrammarFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: GrammarFile })
  async createGrammarFile(
    @common.Body() data: GrammarFileCreateInput
  ): Promise<GrammarFile> {
    return await this.service.createGrammarFile({
      data: data,
      select: {
        createdAt: true,
        fileContent: true,
        fileName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [GrammarFile] })
  @ApiNestedQuery(GrammarFileFindManyArgs)
  async grammarFiles(@common.Req() request: Request): Promise<GrammarFile[]> {
    const args = plainToClass(GrammarFileFindManyArgs, request.query);
    return this.service.grammarFiles({
      ...args,
      select: {
        createdAt: true,
        fileContent: true,
        fileName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: GrammarFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async grammarFile(
    @common.Param() params: GrammarFileWhereUniqueInput
  ): Promise<GrammarFile | null> {
    const result = await this.service.grammarFile({
      where: params,
      select: {
        createdAt: true,
        fileContent: true,
        fileName: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: GrammarFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGrammarFile(
    @common.Param() params: GrammarFileWhereUniqueInput,
    @common.Body() data: GrammarFileUpdateInput
  ): Promise<GrammarFile | null> {
    try {
      return await this.service.updateGrammarFile({
        where: params,
        data: data,
        select: {
          createdAt: true,
          fileContent: true,
          fileName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: GrammarFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGrammarFile(
    @common.Param() params: GrammarFileWhereUniqueInput
  ): Promise<GrammarFile | null> {
    try {
      return await this.service.deleteGrammarFile({
        where: params,
        select: {
          createdAt: true,
          fileContent: true,
          fileName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
