/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SampleFileService } from "../sampleFile.service";
import { SampleFileCreateInput } from "./SampleFileCreateInput";
import { SampleFile } from "./SampleFile";
import { SampleFileFindManyArgs } from "./SampleFileFindManyArgs";
import { SampleFileWhereUniqueInput } from "./SampleFileWhereUniqueInput";
import { SampleFileUpdateInput } from "./SampleFileUpdateInput";

export class SampleFileControllerBase {
  constructor(protected readonly service: SampleFileService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SampleFile })
  async createSampleFile(
    @common.Body() data: SampleFileCreateInput
  ): Promise<SampleFile> {
    return await this.service.createSampleFile({
      data: data,
      select: {
        createdAt: true,
        fileContent: true,
        fileName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SampleFile] })
  @ApiNestedQuery(SampleFileFindManyArgs)
  async sampleFiles(@common.Req() request: Request): Promise<SampleFile[]> {
    const args = plainToClass(SampleFileFindManyArgs, request.query);
    return this.service.sampleFiles({
      ...args,
      select: {
        createdAt: true,
        fileContent: true,
        fileName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SampleFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sampleFile(
    @common.Param() params: SampleFileWhereUniqueInput
  ): Promise<SampleFile | null> {
    const result = await this.service.sampleFile({
      where: params,
      select: {
        createdAt: true,
        fileContent: true,
        fileName: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SampleFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSampleFile(
    @common.Param() params: SampleFileWhereUniqueInput,
    @common.Body() data: SampleFileUpdateInput
  ): Promise<SampleFile | null> {
    try {
      return await this.service.updateSampleFile({
        where: params,
        data: data,
        select: {
          createdAt: true,
          fileContent: true,
          fileName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SampleFile })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSampleFile(
    @common.Param() params: SampleFileWhereUniqueInput
  ): Promise<SampleFile | null> {
    try {
      return await this.service.deleteSampleFile({
        where: params,
        select: {
          createdAt: true,
          fileContent: true,
          fileName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
