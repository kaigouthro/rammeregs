/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SampleFile } from "./SampleFile";
import { SampleFileCountArgs } from "./SampleFileCountArgs";
import { SampleFileFindManyArgs } from "./SampleFileFindManyArgs";
import { SampleFileFindUniqueArgs } from "./SampleFileFindUniqueArgs";
import { CreateSampleFileArgs } from "./CreateSampleFileArgs";
import { UpdateSampleFileArgs } from "./UpdateSampleFileArgs";
import { DeleteSampleFileArgs } from "./DeleteSampleFileArgs";
import { SampleFileService } from "../sampleFile.service";
@graphql.Resolver(() => SampleFile)
export class SampleFileResolverBase {
  constructor(protected readonly service: SampleFileService) {}

  async _sampleFilesMeta(
    @graphql.Args() args: SampleFileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SampleFile])
  async sampleFiles(
    @graphql.Args() args: SampleFileFindManyArgs
  ): Promise<SampleFile[]> {
    return this.service.sampleFiles(args);
  }

  @graphql.Query(() => SampleFile, { nullable: true })
  async sampleFile(
    @graphql.Args() args: SampleFileFindUniqueArgs
  ): Promise<SampleFile | null> {
    const result = await this.service.sampleFile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SampleFile)
  async createSampleFile(
    @graphql.Args() args: CreateSampleFileArgs
  ): Promise<SampleFile> {
    return await this.service.createSampleFile({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SampleFile)
  async updateSampleFile(
    @graphql.Args() args: UpdateSampleFileArgs
  ): Promise<SampleFile | null> {
    try {
      return await this.service.updateSampleFile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SampleFile)
  async deleteSampleFile(
    @graphql.Args() args: DeleteSampleFileArgs
  ): Promise<SampleFile | null> {
    try {
      return await this.service.deleteSampleFile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
