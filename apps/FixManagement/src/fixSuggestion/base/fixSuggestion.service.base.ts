/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FixSuggestion as PrismaFixSuggestion } from "@prisma/client";

export class FixSuggestionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FixSuggestionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.fixSuggestion.count(args);
  }

  async fixSuggestions<T extends Prisma.FixSuggestionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.FixSuggestionFindManyArgs>
  ): Promise<PrismaFixSuggestion[]> {
    return this.prisma.fixSuggestion.findMany<Prisma.FixSuggestionFindManyArgs>(
      args
    );
  }
  async fixSuggestion<T extends Prisma.FixSuggestionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.FixSuggestionFindUniqueArgs>
  ): Promise<PrismaFixSuggestion | null> {
    return this.prisma.fixSuggestion.findUnique(args);
  }
  async createFixSuggestion<T extends Prisma.FixSuggestionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FixSuggestionCreateArgs>
  ): Promise<PrismaFixSuggestion> {
    return this.prisma.fixSuggestion.create<T>(args);
  }
  async updateFixSuggestion<T extends Prisma.FixSuggestionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.FixSuggestionUpdateArgs>
  ): Promise<PrismaFixSuggestion> {
    return this.prisma.fixSuggestion.update<T>(args);
  }
  async deleteFixSuggestion<T extends Prisma.FixSuggestionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.FixSuggestionDeleteArgs>
  ): Promise<PrismaFixSuggestion> {
    return this.prisma.fixSuggestion.delete(args);
  }
}
