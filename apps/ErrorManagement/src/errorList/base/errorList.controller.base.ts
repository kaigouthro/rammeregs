/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ErrorListService } from "../errorList.service";
import { ErrorListCreateInput } from "./ErrorListCreateInput";
import { ErrorList } from "./ErrorList";
import { ErrorListFindManyArgs } from "./ErrorListFindManyArgs";
import { ErrorListWhereUniqueInput } from "./ErrorListWhereUniqueInput";
import { ErrorListUpdateInput } from "./ErrorListUpdateInput";

export class ErrorListControllerBase {
  constructor(protected readonly service: ErrorListService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ErrorList })
  async createErrorList(
    @common.Body() data: ErrorListCreateInput
  ): Promise<ErrorList> {
    return await this.service.createErrorList({
      data: data,
      select: {
        columnNumber: true,
        createdAt: true,
        id: true,
        lineNumber: true,
        message: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ErrorList] })
  @ApiNestedQuery(ErrorListFindManyArgs)
  async errorLists(@common.Req() request: Request): Promise<ErrorList[]> {
    const args = plainToClass(ErrorListFindManyArgs, request.query);
    return this.service.errorLists({
      ...args,
      select: {
        columnNumber: true,
        createdAt: true,
        id: true,
        lineNumber: true,
        message: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ErrorList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async errorList(
    @common.Param() params: ErrorListWhereUniqueInput
  ): Promise<ErrorList | null> {
    const result = await this.service.errorList({
      where: params,
      select: {
        columnNumber: true,
        createdAt: true,
        id: true,
        lineNumber: true,
        message: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ErrorList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateErrorList(
    @common.Param() params: ErrorListWhereUniqueInput,
    @common.Body() data: ErrorListUpdateInput
  ): Promise<ErrorList | null> {
    try {
      return await this.service.updateErrorList({
        where: params,
        data: data,
        select: {
          columnNumber: true,
          createdAt: true,
          id: true,
          lineNumber: true,
          message: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ErrorList })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteErrorList(
    @common.Param() params: ErrorListWhereUniqueInput
  ): Promise<ErrorList | null> {
    try {
      return await this.service.deleteErrorList({
        where: params,
        select: {
          columnNumber: true,
          createdAt: true,
          id: true,
          lineNumber: true,
          message: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
