/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ErrorList as PrismaErrorList } from "@prisma/client";

export class ErrorListServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ErrorListCountArgs, "select">
  ): Promise<number> {
    return this.prisma.errorList.count(args);
  }

  async errorLists<T extends Prisma.ErrorListFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ErrorListFindManyArgs>
  ): Promise<PrismaErrorList[]> {
    return this.prisma.errorList.findMany<Prisma.ErrorListFindManyArgs>(args);
  }
  async errorList<T extends Prisma.ErrorListFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ErrorListFindUniqueArgs>
  ): Promise<PrismaErrorList | null> {
    return this.prisma.errorList.findUnique(args);
  }
  async createErrorList<T extends Prisma.ErrorListCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ErrorListCreateArgs>
  ): Promise<PrismaErrorList> {
    return this.prisma.errorList.create<T>(args);
  }
  async updateErrorList<T extends Prisma.ErrorListUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ErrorListUpdateArgs>
  ): Promise<PrismaErrorList> {
    return this.prisma.errorList.update<T>(args);
  }
  async deleteErrorList<T extends Prisma.ErrorListDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ErrorListDeleteArgs>
  ): Promise<PrismaErrorList> {
    return this.prisma.errorList.delete(args);
  }
}
