/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ErrorList } from "./ErrorList";
import { ErrorListCountArgs } from "./ErrorListCountArgs";
import { ErrorListFindManyArgs } from "./ErrorListFindManyArgs";
import { ErrorListFindUniqueArgs } from "./ErrorListFindUniqueArgs";
import { CreateErrorListArgs } from "./CreateErrorListArgs";
import { UpdateErrorListArgs } from "./UpdateErrorListArgs";
import { DeleteErrorListArgs } from "./DeleteErrorListArgs";
import { ErrorListService } from "../errorList.service";
@graphql.Resolver(() => ErrorList)
export class ErrorListResolverBase {
  constructor(protected readonly service: ErrorListService) {}

  async _errorListsMeta(
    @graphql.Args() args: ErrorListCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ErrorList])
  async errorLists(
    @graphql.Args() args: ErrorListFindManyArgs
  ): Promise<ErrorList[]> {
    return this.service.errorLists(args);
  }

  @graphql.Query(() => ErrorList, { nullable: true })
  async errorList(
    @graphql.Args() args: ErrorListFindUniqueArgs
  ): Promise<ErrorList | null> {
    const result = await this.service.errorList(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ErrorList)
  async createErrorList(
    @graphql.Args() args: CreateErrorListArgs
  ): Promise<ErrorList> {
    return await this.service.createErrorList({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ErrorList)
  async updateErrorList(
    @graphql.Args() args: UpdateErrorListArgs
  ): Promise<ErrorList | null> {
    try {
      return await this.service.updateErrorList({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ErrorList)
  async deleteErrorList(
    @graphql.Args() args: DeleteErrorListArgs
  ): Promise<ErrorList | null> {
    try {
      return await this.service.deleteErrorList(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
